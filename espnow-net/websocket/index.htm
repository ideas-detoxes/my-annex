<script>
/*
    function ConnectWebSocket() {
        console.log("ConnectWebSocket:" + typeof connection)
        if (typeof connection != "undefined") {
            connection.onclose = function() {}
            connection.close()
        }
        setTimeout(function() {
            connect()
        }, 500)
    }
*/</script>
<body onloadx=ConnectWebSocket()>


<table>
    <td>Connection
    <td><svg height=20 width=30><rect fill=grey height=18 id=status stroke=black width=18 x=1 y=1 /></svg>
    <td><button onclick=ConnectWebSocket() id=reconnect>Reconnect</button>
    <td><span id="statuses"></span>
    <td><input type="file" id="file-input" />
    <td><button onclick=MyTest() id=mytest title="Test">Test</button>
</table>
<div id=wfile style="display: none;">
Woking file:<pre id="file-content"></pre>
</div>
<div id=log_div>
</div>
</body>
<script>
function readSingleFile(e) {
    var file = e.target.files[0];
    if (!file) {
        return;
    }
    var reader = new FileReader();
    reader.onload = function(e) {
        var contents = e.target.result;
        displayContents(contents);
    };
    reader.readAsText(file);
    }
    
    function displayContents(contents) {
    var element = document.getElementById('file-content');
    element.textContent = contents;
    }
    
    document.getElementById('file-input').addEventListener('change', readSingleFile, false);
</script>
<script>
//////////////////////////////////////////////////////////////////////
    var p_interval, tm, save_position;
//    var ws_clients = ["10.42.0.110", "10.42.0.172"]
//    var connitem = {ip:"10.42.0.110", connection=undefined}
    var ws_clients = [{ip:"10.42.0.242"}, {ip:"10.42.0.252"}]

    function _$(e) {
      return document.getElementById(e)
    }
    function sendToAll(text) {
        l=ws_clients.length
        for (i=0; i<l; ++i) {
            esp=ws_clients[i]
            if (esp.connection == esp.connection.OPEN) {
                esp.connection.send(text)
            }
        }
    }
    function ConnectWebSocket() {
        // disconnect all connected WS, and connect again to all
        l=ws_clients.length
        for (i=0; i<l; ++i) {
            esp=ws_clients[i]
            if (typeof esp.connection != "undefined") {
                console.log("ConnectWebSocket: diconnecting " + esp.ip + " : " + typeof esp.connection)
                esp.connection.onclose = function() {}
                esp.connection.close()
            }
            connect(esp);
        }
        setTimeout(ping, 1000)
    }

    function connect(esp) {
            console.log("Connecting:" + esp.ip)
            sts=_$("statuses")
            st = document.createElement('span')
            st.id = "status-"+esp.ip
            st.innerHTML = esp.ip
            sep = document.createElement('span')
            sep.innerHTML = "&nbsp"+"&nbsp"
            sts.appendChild(st)
            sts.appendChild(sep)
            esp.connection = connectOne(esp.ip)
            console.log("XX"+esp.ping_ts)
    }


    function connectOne(ip) {
//        ip="10.42.0.172"
//        ip="10.42.0.110"
        port = 80
        console.log("connecting to:" + ip)
        connection = new WebSocket("ws://" + ip + ":" + port + "/ws", "Editor"), 
        ts=new Date().getTime()
        connection.ping_ts = ts
        connection.onopen = function() {
            _$("status-"+ip).style.background = "green"
            _$("status").style.fill = "green";
            if (esp.connection == esp.connection.OPEN) {
                connection.send("cmd:getver"), 
                connection.send("cmd:gethelp")
            }
        }
        connection.onclose = function() {
            _$("status-"+ip).style.background = "red"
        } 
        connection.onerror = function(e) {
            _$("status-"+ip).style.background = "ff9900"
        }
        connection.onmessage = function(e) {
            var t = e.data;
            _$("status-"+ip).style.background = "green"
            clearTimeout(tm)
            connection.send("$")
            if ("INIT:" == t.substr(0, 5)) {
                return 
            }
            if ("SAVE:GIVE" == t) {
                connection.send("save:more" + buff.substr(save_position, 512)), 
                void(save_position += 512);
                return 
            }
            if ("SAVE:END" == t) {
                connection.send("load:" + "/b.bas")
                connection.send("cmd:run")
                return 
            }
            if ("SAVE:ERR" == t) {
                if ("DIR:" == t.substr(0, 4)) {
                for (t = t.substr(4), dirfiles = t.split("\n"), dirfiles.sort(); 0 < dlist.options.length;) dlist.remove(0);
                var n = new Array;
                for (i = 0; i < dirfiles.length; i++) {
                    n[i] = dirfiles[i].split("/");
                }
                var o = new Array;
                for (i = 0; i < n.length; i++) "" == n[i][0] ? void 0 !== n[i][1] && (void 0 !== n[i][2] ? o.push("/" + n[i][1]) : o.push("/")) : void 0 !== n[i][0] && (void 0 !== n[i][1] ? o.push(n[i][0]) : o.push(""));
                if (uniqueArray = o.filter(function(e, t, n) {
                    return n.indexOf(e) == t
                    }), 
                    uniqueArray = uniqueArray.sort(), 
                    0 < uniqueArray.length)
                    for (var i = 0; i < uniqueArray.length; i++) dlist.add(new Option(uniqueArray[i], uniqueArray[i]));
                return dlist.value = "/", "undefined" != typeof Storage && null != localStorage.getItem("esp_default_dir") && (dlist.value = localStorage.getItem("esp_default_dir")), void DirectoriesClick(this)
                }
            }
            if (t.startsWith("GETVAR:")) {
                l = t.substr(7).split("_^-");
                _$("var1_value").value = l[0],
                _$("var2_value").value = l[1]
                return 
            }
            if (t.startsWith("VERSION:")) {
//                _$("version").innerHTML = t.substr(8);
            } 
            if (t.startsWith("LOG:")) {
                console.log(this)
                _$("log_div").innerText += "\n" + "[" +this.ip + "] "+ t.substr(4)
            }
            if ("__pong__" == t.substr(0, 8)) {
                ts=new Date().getTime()
                this.ping_ts=ts;
                console.log("pong for "+this.ip + " " + this.ping_ts)
                _$("status-"+ip).style.background = "green" 
                return 
            }
        }
        return connection;
    }

    function ping() { 
        l=ws_clients.length
        ts=new Date().getTime()
        for (i=0; i<l; ++i) {
            console.log("ping:" + ws_clients[i].ip + " " + ws_clients[i].ping_ts)
            if ( (ts-ws_clients[i].ping_ts) > 1) {
                console.log("    timeout")
                _$("status-"+ws_clients[i].ip).style.background = "red"
            } 
            if ( (typeof ws_clients[i].connection == "undefined") || (ws_clients[i].connection.readyState >= ws_clients[i].connection.CLOSING) ) {
                console.log("    notconnect")
//                    connectOne(ws_clients[i].ip) 
            } else {  
                console.log("    send ping " + ws_clients[i].ip + " " + ws_clients[i].ping_ts)
                if (ws_clients[i].connection.readyState == ws_clients[i].connection.OPEN) {
                    ws_clients[i].connection.send("__ping__")
                }
            }
        }
    }
    
    function cmdLoad(e) {
      var t = _$("file_name");
      connection.send("load:" + "/b.bas")
    }
/* 
    function cmdSave(e) {
      var t;
      if (buff = editAreaLoader.getValue("code"), 
            0 == buff.endsWith("\n") && (buff += "\n"), 
            load_pending = "none" == _$("file_editor_div").style.display ? 
            (t = _$("file_name"), !0) : (t = _$("file_name_editor"), !1), 
            filesize = buff.length, 
            position = 0, 31 < t.value.length) 
            return alert("The filename " + t.value + " is too long!\n It must be less than 31 characters including the path."), 
            void(load_pending = !1);
      "" != t.value && connection.send("save:start" + t.value), 
      set_local_storage()
    }
 */    
    function cmdSave() {
      var t;
      buff = _$("file-content").innerText
      if (buff.endsWith("\n") != 0) {
        buff += "\n";
      }
      filesize = buff.length
      save_position = 0
      connection.send("save:start" + "/b.bas")
      return;
      if (buff = editAreaLoader.getValue("code"), 
            0 == buff.endsWith("\n") && (buff += "\n"), 
            load_pending = "none" == _$("file_editor_div").style.display ? 
            (t = _$("file_name"), !0) : (t = _$("file_name_editor"), !1), 
            filesize = buff.length, 
            position = 0, 31 < t.value.length) 
            return alert("The filename " + t.value + " is too long!\n It must be less than 31 characters including the path."), 
            void(load_pending = !1);
      "" != t.value && connection.send("save:start" + t.value), 
      set_local_storage()
    }


    function cmdClick(e) {
      connection.send("cmd:" + e.id)
    }

    function cmdRun() {
      for (var e = editAreaLoader.getBreakpoints("code"), t = 0; t < e.length; t++) e[t] = ("00000" + e[t])
        .substr(-5);
      connection.send("cmd:run " + e)
    }

    function onImmediateChange(e) {
      if (13 == e.keyCode || 10 == e.keyCode) {
        var t = _$("immediate")
          .value.substr(0, _$("immediate")
            .selectionStart)
          .split("\n")
          .length;
        connection.send("cmd:immediate " + _$("immediate")
          .value.split("\n")[t - 1] + "   ")
      }
    }
    function MyTest() {
//        connection.send("load:/b.bas")
//        connection.send("cmd:run")
        sendToAll("cmd:immediate wlog millis")
//        cmdSave();
    }

</script>